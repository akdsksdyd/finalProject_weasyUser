<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <mapper namespace="com.weasy.user.board.service.BoardMapper">
  
  	<insert id="insertTeam" parameterType="TeamVO">
  	
  		insert into team (teamRegdate,
  						  endDate, 
  						  teamName, 
  						  teamGoal, 
  						  userEmail,
  						  teamStatus)
  					values(#{teamRegdate},
  						   #{endDate},
  						   #{teamName},
  						   #{teamGoal},
  						   #{userEmail},
  						   #{teamStatus})
  	</insert>	
  	
  	<update id="updateTeam" parameterType="TeamVO">
  		update team set
  			teamRegdate=#{teamRegdate},
  			endDate=#{endDate},
  			teamGoal=#{teamGoal},
  			userEmail=#{userEmail}
  		where teamNo = #{teamNo}
  	</update>
  	
  	<select id="getTeamList" resultType="TeamVO">
  		select teamNo, teamRegdate, endDate, teamName, teamGoal, userEmail, teamStatus 
  		from TEAM where teamNo IN (select teamNo from authority where userEmail=#{userEmail}) and t.teamStatus = 'Y'
  		order by teamNo asc
  	</select>
  	
  	<select id="getTeamInfo" resultType="TeamVO">
  		select teamNo, teamRegdate, endDate, teamName, teamGoal, userEmail, teamStatus 
  		from team where teamNo=#{teamNo}
  	</select>
  	
  	<update id="closeTeamStatus">
  		update team set teamStatus = 'N' where teamNo = #{teamNo};
  	</update>
  	
  	<select id="getTeamListWithRole" resultType="TeamVO">
  		select t.teamNo, t.teamRegdate, t.endDate, t.teamName, t.teamGoal, t.userEmail, t.teamStatus, a.role
		from team t 
		left join authority a
		on t.teamNo = a.teamNo
		where a.userEmail = #{userEmail} and t.teamStatus = 'Y'
		order by teamNo asc
  	</select>
  	
  	<insert id="addTask" parameterType="TaskVO">
  		insert into task(title,
  						 content,
  						 startDate,
  						 targetDate,
  						 teamNo,
  						 status,
  						 progressRate)
  					values(#{title},
  						   #{content},
  						   #{startDate},
  						   #{targetDate},
  						   #{teamNo},
  						   0,
  						   #{progressRate})
  	</insert>
  	
  	<select id="getTaskList" resultType="TaskVO">
  		select taskNo, teamNo, userEmail, title, content, startDate, progressRate, targetDate, status 
  		from TASK where teamNo = #{teamNo} order by taskNo desc
  	</select>
  	
  	<select id="getTeamNo" resultType="int">
  		select teamNo, userEmail from TEAM where teamName = #{teamName}
  	</select>
  	
  	<select id="getTeamMember" resultType="AuthorityVO">
  		select userEmail, teamNo, role,
		(select nickname from users where userEmail=a.userEmail) as nickName
		from authority a where teamNo = #{teamNo};
  	</select>
  	
  	<select id="checkAuthority" resultType="int">
  		select count(*) from authority where userEmail = #{userEmail} and teamNo = #{teamNo}
  	</select>
  	
  	<select id="getAuthNo" resultType="int">
  		select authNo from authority where userEmail=#{userEmail} and teamNo=#{teamNo}
  	</select>
  	
  	<update id="updateAuthority">
  		<selectKey resultType="int" keyProperty="authNo" order="BEFORE">
  			select authNo from authority where userEmail=#{userEmail} and teamNo=#{teamNo}
  		</selectKey>
  		update authority set userEmail=#{userEmail}, role=#{role} where authNo=#{authNo}
  	</update>
  	
  	<insert id="addAuthority" parameterType="AuthorityVO">
  		insert into authority (userEmail, teamNo, role) 
  		values (#{userEmail}, #{teamNo}, #{role})
  	</insert>
  	
  	<select id="getAuthority" resultType="AuthorityVO">
  		select authNo, userEmail, teamNo, role 
  		from authority 
  		where teamNo=#{teamNo} and userEmail=#{userEmail}
  	</select>
  	
  	<delete id="deleteAuthority" parameterType="int">
  		delete from authority where authNo=#{deletekey}
  	</delete>
  	
  	<update id="updateTask">
  		update task set title = #{title},
  						content = #{content},
  						<if test="startDate != '' and startDate != null">
	  						startDate = #{startDate},
  						</if>
  						<if test="targetDate != '' and targetDate != null">
	  						targetDate = #{targetDate},
  						</if>
  						progressRate = #{progressRate}
  					where taskNo = #{taskNo}
  			
  		<selectKey keyProperty="progressRate" resultType="int" order="BEFORE">
  		
  			select progressRate from task where taskNo = #{taskNo}
  		
  		</selectKey>		
  			
  	</update>
  	
  	<insert id="insertReply" parameterType="ReplyVO">
  	
  		insert into REPLY (taskNo,
  						   teamNo,
  						   userEmail,
  						   comment)
  					values(#{taskNo},
  						   #{teamNo},
  						   #{userEmail},
  						   #{comment})
  	
  	</insert>
  	
  	<select id="putTask" resultType="TaskVO">
  		select userEmail, title, content, startDate, progressRate, targetDate, status
  		from TASK
  		where taskNo = #{taskNo}
  	</select>
  	
  	<select id="putReply" resultType="ReplyVO">
  		select userEmail, replyNo, taskNo, comment from REPLY where taskNo = #{taskNo}
  	</select>
  	
  	<!-- 댓글 수정 -->
  	<update id="updateReply" parameterType="ReplyVO">
  	
  		update reply set comment = #{comment},
  						 replyDate = now()
  					 where replyNo = #{replyNo}
  	
  	</update>
  	
  	<!-- 댓글 삭제 -->
  	<delete id="deleteReply" parameterType="ReplyVO">
  	
  		delete from reply where replyNo = #{replyNo}
  	
  	</delete>
  	
  	<!-- 공지사항 리스트 -->
  	<select id="getNoticeList" resultType="noticeListVO">
		SELECT noticeNo, noticeTitle, noticeContent, DATE_FORMAT(noticeRegdate, '%Y-%m-%d')as noticeRegdate , noticeLevel FROM noticeList order by noticeLevel desc, noticeRegdate desc
  	</select>
  	  	  	
  
  	<!-- 공지사항 전체 페이지 수 -->
  	<select id="getTotal" resultType="int">
        select count(*) as total from noticeList 
        
	   <!-- 	
   		<if test="cri.startDate != null and cri.startDate != '' ">
        <![CDATA[and date_format(prod_enddate, '%Y-%m-%d') >= date_format(#{cri.startDate}, '%Y-%m-%d')]]>
        </if>

        <if test="cri.endDate != null and cri.endDate != '' ">
        <![CDATA[and date_format(prod_enddate, '%Y-%m-%d') <= date_format(#{cri.endDate}, '%Y-%m-%d')]]>
        </if>
        
        <if test="cri.searchName != null and cri.searchName != '' ">
        and prod_name like concat('%', #{cri.searchName}, '%')
        </if>
        <if test="cri.searchContent != null and cri.searchContent != '' ">
        and prod_content like concat('%', #{cri.searchContent}, '%')
        </if>
         -->
        
     </select>
  	<!-- 공지사항 상세페이지 가져오기 -->
  	<select id="getDetailNotice" resultType="noticeListVO">
  		SELECT noticeNo, noticeTitle, noticeContent, DATE_FORMAT(noticeRegdate, '%Y-%m-%d')as noticeRegdate FROM noticeList where noticeNo = #{noticeNo}
  	</select>
  	
  	<!-- 공지사항 검색 -->
  	<select id="getSearchNotice" resultType="noticeListVO">
  		SELECT noticeNo, noticeTitle, noticeContent, DATE_FORMAT(noticeRegdate, '%Y-%m-%d')as noticeRegdate , noticeLevel 
  		FROM noticeList 
  		<choose>
	  		<when test="searchType != null and searchType.equals('title')">
	  			WHERE noticeTitle  LIKE CONCAT('%',#{keyword},'%') order by noticeLevel desc, noticeNo desc
	  		</when>
  		</choose>
  		<choose>
	  		<when test="searchType != null and searchType.equals('content')">
	  			WHERE noticeContent LIKE CONCAT('%',#{keyword},'%') order by noticeLevel desc, noticeNo desc
	  		</when>
  		</choose>
  	</select>
  	
  	<!-- task상태(todo/doing/done) 변경 update -->
  	<update id="taskStatusChange" parameterType="taskVO">
  		update task set status = #{status} where taskNo = #{taskNo}
  	</update>
  	
  	<!-- task에 user 추가 (업무할당기능) -->
  	<update id="updateTaskUser" parameterType="taskVo">
  		update task set userEmail = #{userEmail} where teamNo = #{teamNo} and taskNo = #{taskNo}
  	</update>
  	
  	<!-- 상단에 header부분에 뜨는 notice insert -->
  	<insert id="insertUserNotice" parameterType="noticevo">
  		insert into notice (userEmail, message, msgStatus) 
  		values(#{userEmail}, #{message}, #{msgStatus})
  	</insert>
  	
  	<!-- user의 notice 읽어오기 -->
  	<select id="getUserNotice" resultType="noticeVO">
  		select noticeNo, userEmail, message, msgStatus, checked 
  		from notice 
  		where userEmail = #{email} and checked = 'N'
  		order by noticeNo asc
  	</select>
  	
  	<!-- 확인된 notice checked상태 Y로 변경 -->
  	<update id="updateUserNoticeChecked" parameterType="noticevo">
  		update notice set checked = 'Y' where noticeNo = #{noticeNo}
  	</update>
  	
  	<!-- taskDetail테이블 추가 -->
  	<insert id="insertTodoList" parameterType="TaskDetailVO">
  	
  		insert into taskdetail (taskNo,
  								taskDetail,
  								userEmail,
  								status)
  					values(#{taskNo},
  						   #{taskDetail},
  						   #{userEmail},
  						   #{status})
  	
  	</insert>
  	
  	<!-- taskDetail 업데이트 구문 -->
  	<update id="updateTodoList" parameterType="TaskDetailVO">
  	
  		update taskdetail set taskDetail = #{taskDetail},
  							  status = #{status}
  						  where taskDetailNo = #{taskDetailNo}
  	
  	</update>
  	
  	<!-- taskDetail 조회 -->
  	<select id="putTaskDetail" resultType="TaskDetailVO">
  	
  		select taskDetailNo, taskNo, taskDetail, status from taskDetail where taskNo = #{taskNo}
  	
  	</select>
  	
  	<update id="progressUpdate" parameterType="TaskVO">
  	
  		<selectKey keyProperty="progressRate" resultType="int" order="BEFORE">
  			select round(count(case when status = 2 then 1 end)/count(*)*100,0) as progressRate
       		from taskdetail where taskNo = #{taskNo}
  		</selectKey>
  		
  		update task set progressRate = #{progressRate} where taskNo = #{taskNo}
  	
  	</update>
  	
  	<!-- todo리스트 삭제 -->
  	<delete id="deletetodo" parameterType="TaskDetailVO">
  		delete from taskdetail where taskDetailNo = #{taskDetailNo}
  	</delete>
  	
  </mapper>
  
  
  
  
  
  
  
  
  
  
  
  
  
  